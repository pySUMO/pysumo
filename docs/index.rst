.. pySUMO documentation master file, created by
   sphinx-quickstart on Thu Dec 18 16:01:48 2014.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

pysumo and pySUMOQt
===================

Introduction
============
This document introduces the Structure of our Ontology-editor pySUMO.

First, a short excursion to the "Model View Controller" design pattern is made.

Subsequently, our Class Diagram, which is structured according to the Model
View Controller (MVC) design.  Due to limited resources of paper size, the
class diagram is shown twice. Once as whole on page and one time on two pages
cut in middle to increase the readability.

Afterwards, several sequence diagrams which show a timeline of typical actions
are presented.

Furthermore, there are a couple of activity diagrams showcasing both a casual
pySUMO workflow as well as what pySUMO does in the background to support your
workflow.

Thereafter the individual classes are introduced in more detail. This is
followed up by a list of errors that pySUMO can throw and a list of external
libraries used to develop pySUMO.


Structure
=========
.. graphviz:: ./MVC.gv

The program is structured around the MVC-architecture. The partitioning into
Model, View and Controller makes modification of Program code easier and also
allows the lib to be used independently of the GUI.

Model
-----
| The model contains both the Parser and the Abstract Syntax Tree (AST) generated by the Parser.
| The AST stores the Ontology in memory and allows modifications thereof.
| The Parser provides both a kif-parser and serializer as well as a parser for the SUMO-WordNet mapping.

Controller
----------
The controller contains all base functionality of the program. It mediates all
accesses to the AST, creates and maintains an index and handles interactions
with WordNet. The controller also handles all other core functionality of
pySUMO such as undo and redo.

View
----
The view consists of all the graphical elements of pySUMO including, but not
limited to the Qt GUI.

Overview: Class Diagram of pySUMO
==================================
.. uml::
   !include ./UML/main.pu

Sequence diagram
================

Adding graph node
------------------
.. uml::
   !include ./UML/graph_node_add.iuml

This diagram displays how the GraphWidget responds to user input and adds new
nodes to the Ontology. Note that all operations that might change the Ontology
pass through the SyntaxController and all operations that read from the loaded
Ontologies pass through the IndexAbstractor.

Searching in the index
----------------------
.. uml::
   !include ./UML/search.iuml

This diagram displays a simple abstraction of how the DocumentationWidget
responds to a user search request. Note that it does not include any
IndexAbstractor internal operations such as building and maintaining the Index.

Activity diagram
================
Graph widget input loop
-----------------------
.. uml::
   :scale: 80%

   !include ./UML/graphactivity.iuml

This diagram displays the activity diagram used by the GraphWidget when a user
adds a node to the graph. Of special note is that the parsing of the new graph
is done in the background so that the user can still interact with the
GraphWidget while it is updating the Ontology.

Text editor input loop
----------------------
.. uml::
   !include ./UML/textactivity.iuml

This diagram displays the activity diagram used by the TextWidget while the
user is typing. Once the user pauses typing, the text editor checks whether the
parenthetical syntax is correct, and if it passes a simple syntax check, the
text is passed to the parser. The parser then checks syntax and semantics and
returns accordingly. If errors occur during parsing, they are displayed in the
editor.

Common workflow
------------------
.. uml::
   :scale: 90%

   !include ./UML/activity_1.iuml

This diagram displays an abstract view of a common User-interaction with the
program. The user starts the program adds a .kif-File, searches in WordNet
and finally adds a relation through the GraphWidget. PySUMO automatically
converts the relation to kif and appends it to the ontology source.

Exit process
------------
.. uml::
   !include ./UML/activity_2.iuml

This diagram displays an abstract view of the activity diagram when a user
wants to exit the program. This is done when the user clicks on the close icon
in the title bar of the main window of pySUMO or on 'Exit' in the menu 'File'.
The program makes sure that there are no unsaved changes in open ontologies and
if there are changes, prompts if they should be saved. If the user doesn't save
them, the modifications will be lost. Note that the program also saves session
layouting preferences of the GUI so they can be restored in the next pySUMO
session.  These preferences include, for example, the position of widgets in
the main window.

Detail: Modules
==================================

.. toctree::
   :maxdepth: 4


   pysumo
   pySUMOQt

Changes in Version 1.0
====================================

.. toctree::
   :maxdepth: 4

   Changes

Feature Request
===================================

.. toctree::
   :maxdepth: 4

   FeatureRequest

Tests
=====
ActionLog
---------
* Queue the addition of an ontology to the ActionLog
* Initialize an ActionLog with an ontology
* Modify an ontology and store the changes
* Assert that undoing the last action returns the previous state
* Assert that undo/redo is invariant
* Make sure the queue auto-flushes when exceeding size
* Check that addition queue is overwritten when new changes are added and the old changes have not been OK'd.
* Assert the invariance of excessive undoes
* Assert the invariance of excessive redoes
* Check that ActionLog copes with high workloads

IndexAbstractor
---------------
* Assert than normalize() normalizes terms correctly.
* Assert that the index is built correctly.
* Test search on various terms
* Test WordNet search and self-initialization.
* Build several AbstractGraphs and check their contents
* Test that get_ontology_file returns the correct kif
* Test that adding multiple ontologies works
* Test that get_completions returns a correct list of terms

Parser
------
wParse
^^^^^^
* Check that Tokenizer works on single lines
* Check that whole WordNet parses successfully

kifParse
^^^^^^^^
* Check invariance of kifparse/kifserialize
* Test that parsing Government.kif works

SyntaxController
----------------
* Assert that add_ontology() adds an AST equivalent to the one produced by kifparse()
* Assert the invariance of redundant adds
* Assert that adding and then deleting an ontology is invariant
* Check that adding two ontologies works correctly
* Assert that get_ontologies() lists the correct ontologies
* Assert that modifying the ontology  works correctly
* Assert that parsing diffs works correctly
* Assert that undo/redo work correctl

WordNet
-------
* Check functionality of locate_term
* Check functionality of find_synonym

GUI
---------

Text Editor
^^^^^^^^^^^^^^^^^
   1. Open pySUMO
   2. Open TextEditor
   3. Open Merge.kif
   4. Choose Merge.kif
   5. Collapse Line 288
   6. Collapse Line 136
   7. Collapse Line 134
   8. Uncollapse Line 134
   9. Uncollapse Line 288
   10. Collapse all
   11. Expand all

Graphical Settings
^^^^^^^^^^^^^^^^^^^^^^^
  1. Open pySUMO
  2. Open TextEditor
  3. Open Merge.kif
  4. Choose Merge.kif
  5. Open GraphWidget
  6. Open DocumentationWidget
  7. Open Hierarchy Widget
  8. Open TextEdiorWidget

Hierarchy Widget
^^^^^^^^^^^^^^^^^^^^^^^
  1. Open pySUMO
  2. Open HierarchyWidget
  3. Open Merge.kif
  4. Type instance into the Relation field
  5. Press Enter
  6. Type unitofcurrency into the Node field
  7. Press Enter
  8. Type subrelation into the Relation field
  9. Press Enter
  10. Collapse all
  11. Expand all

Graph Widget
^^^^^^^^^^^^^^^^^^^^^^^^
  1. Open pySUMO
  2. Open GraphWidget
  3. Open Merge.kif
  4. Select instance on Variant selector
  5. Select a root node
  6. Select a depth (1)
  7. Open a new ontology to write temporary content to.
  8. Add a node "bla" in Graph Widget
  9. Add a node "bla2"
  10. Add a node "bla" (error)
  11. Add a relation instance between "bla" and "bla2" (error)
  12. Change scale
  13. Choose a valid selector (there was a messagebox)
  14. Add a relation instance between "bla" and "bla2"
  15. Undo
  16. Redo

Documentation Widget
^^^^^^^^^^^^^^^^^^^^^^^^^

1. Open pySUMO
2. Open Merge.kif
3. Open DocumentationWidget
4. Switch to the Ontology tab in the DocumentationWidget
5. Type subrelation into the search field
6. Press Enter
7. Open TextEditor
8. Select Merge.kif in TextEditor
9. Press one of the links listed under "Merge"
10. Switch to the WordNet tab in the DocumentationWidget
11. Search for 'Object'
12. Search for 'Table'


Test Results
==================

.. toctree::
   :maxdepth: 4

   tests

For a more detailled view on our testing please visit `our github Page <http://pysumo.github.io/pysumo-htmlcov>`_

Errors
==========
+-------------------+--------------------------------------------+
|Errors             | Cause[s]                                   |
+===================+============================================+
|HTTPError          |An HTTP connection failed                   |
+-------------------+--------------------------------------------+
|IOError            |An IO operation failed                      |
+-------------------+--------------------------------------------+
|KeyError           |The specified key does not exist in the dict|
+-------------------+--------------------------------------------+
|NoSuchOntologyError|The specified Ontology does not exist       |
+-------------------+--------------------------------------------+
|NoSuchTermError    |The specified Term does not exist           |
+-------------------+--------------------------------------------+
|ParseError         |The specified Ontology is not valid         |
+-------------------+--------------------------------------------+

External Libraries
==================
+-----------+--------------------------------+
|PySide     |Python bindings for Qt          |
+-----------+--------------------------------+
|PyGraphviz |Python bindings for Graphviz    |
+-----------+--------------------------------+


Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`

